
let {...} = import("../rl/raylib.temper");

var hashtable = new MapBuilder<Int, ListBuilder<Node>>();
var heat = 0;

var pow2 = new ListBuilder<Int>();
var cur = 1;
for (var i = 0; i < 64; i++) {
  pow2.add(cur);
  cur += cur;
}

class DrawConfig {
  public screen: Rectangle;
}

interface Node {
  public level: Int;
  public pop: Int;
  public a: Node;
  public b: Node;
  public c: Node;
  public d: Node;
  public hash: Int;
  public hash0: Int;
  public succ: ListBuilder<Node>;

  public setSucc(j: Int, n: Node): Void;
  public draw(config: DrawConfig, bounds: Rectangle): Void;

  public successor(j: Int): Node;
  public life2(): Node;
  public successorImpl(j: Int): Node;
  public center(): Node;
  public advance(n: Int): Node;
  public copyWithRangeSet(low: List<Int>, high: List<Int>, data: MapBuilder<Int, Boolean>): Node;
}

class RealNode extends Node {
  public level: Int;
  public pop: Int;
  public a: Node;
  public b: Node;
  public c: Node;
  public d: Node;
  public hash: Int;
  public hash0: Int;
  public succ: ListBuilder<Node>;
  
  constructor(level: Int, pop: Int, a: Node, b: Node, c: Node, d: Node, hash: Int): Void {
    this.level = level;
    this.pop = pop;
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
    this.hash = hash;
    this.hash0 = hash % 2147483647;
    succ = new ListBuilder<Node>();
  }

  public setSucc(j: Int, n: Node): Void {
    while (succ.length <= j) {
      succ.add(fake);
    }
    succ[j] = n;
  }

  public draw(config: DrawConfig, base: Rectangle): Void {
    if (!CheckCollisionRecs(config.screen, base)) {
      return;
    }
    if (pop == 0) {
    } else if (level == 0 || base.width < 2.0) {
      DrawRectangleRec(
        base,
        WHITE,
      );
    } else {
      var halfWidth = base.width * 0.5;
      var halfHeight = base.height * 0.5;
      a.draw(config, new Rectangle(base.x, base.y, halfWidth, halfHeight));
      b.draw(config, new Rectangle(base.x + halfWidth, base.y, halfWidth, halfHeight));
      c.draw(config, new Rectangle(base.x, base.y + halfHeight, halfWidth, halfHeight));
      d.draw(config, new Rectangle(base.x + halfWidth, base.y + halfHeight, halfWidth, halfHeight));
    }
  }
  
  public successor(j: Int): Node {
    var mSucc = succ.getOr(j, fake); 
    if (mSucc == fake) {
      var jthSucc = successorImpl(j);
      setSucc(j, jthSucc);
      return jthSucc;
    } else {
      return mSucc;
    }
  }

  public life2(): Node {
    var ad = lifeRule(
      a.a, a.b, b.a,
      a.c, a.d, b.c,
      c.a, c.b, d.a
    );
    var bc = lifeRule(
      a.b, b.a, b.b,
      a.d, b.c, b.d,
      c.b, d.a, d.b
    );
    var cb = lifeRule(
      a.c, a.d, b.c,
      c.a, c.b, d.a,
      c.c, c.d, d.c
    );
    var da = lifeRule(
      a.d, b.c, b.d,
      c.b, d.a, d.b,
      c.d, d.c, d.d
    );
    return join(ad, bc, cb, da);
  }

  public successorImpl(j: Int): Node {
    if (pop == 0) {
      return a;
    } else if (level == 2) {
      return life2();
    } else {
      if (j > level - 2) {
        j = level - 2;
      }
      var c1 = a.successor(j);
      var c2 = join(a.b, b.a, a.d, b.c).successor(j);
      var c3 = b.successor(j);
      var c4 = join(a.c, a.d, c.a, c.b).successor(j);
      var c5 = join(a.d, b.c, c.b, d.a).successor(j);
      var c6 = join(b.c, b.d, d.a, d.b).successor(j);
      var c7 = c.successor(j);
      var c8 = join(c.b, d.a, c.d, d.c).successor(j);
      var c9 = d.successor(j);

      if (j < level - 2) {
        return join(
          join(c1.d, c2.c, c4.b, c5.a),
          join(c2.d, c3.c, c5.b, c6.a),
          join(c4.d, c5.c, c7.b, c8.a),
          join(c5.d, c6.c, c8.b, c9.a),
        );
      } else {
        return join(
          join(c1, c2, c4, c5).successor(j),
          join(c2, c3, c5, c6).successor(j),
          join(c4, c5, c7, c8).successor(j),
          join(c5, c6, c8, c9).successor(j),
        );
      }
    }
  }

  public center(): Node {
    var z = zero(level - 1);
    return join(
      join(z, z, z, a), join(z, z, b, z),
      join(z, c, z, z), join(d, z, z, z),
    );
  }

  public advance(n: Int): Node {
    if (n == 0) {
      return this;
    }
    var bits = new ListBuilder<Boolean>();
    var node = this.as<Node>();
    while (n != 0) {
      bits.add(n % 2 != 0);
      n /= 2;
    }
    for (var i = bits.length-1; i >= 0; i--) {
      if (bits[i]) {
        node = node.center().successor(i);
      }
    }
    return node;
  }

  public copyWithRangeSet(low: List<Int>, high: List<Int>, data: MapBuilder<Int, Boolean>): Node {
    var low0 = low[0];
    var low1 = low[1];
    var high0 = high[0];
    var high1 = high[1];

    var width = high0 - low0;
    var height = high1 - low1;

    let go(grid: Node, x: Int, y: Int, size: Int): Node {
      if (x >= high0 || x + size <= low0 || y >= high1 || y + size <= low1) {
        return grid;
      }
      
      if (grid.level == 0) {
        if (data.getOr((x - low0) + (y - low1) * width, false)) {
          return on;
        } else {
          return off;
        }
      }
      
      var halfSize = size / 2;
      var xh = x + halfSize;
      var yh = y + halfSize;
      return join(
        go(grid.a, x, y, halfSize),
        go(grid.b, xh, y, halfSize),
        go(grid.c, x, yh, halfSize),
        go(grid.d, xh, yh, halfSize),
      );
    }

    return go(this, 0, 0, pow2[level]);
  }
}

class FakeNode extends Node {
  public level: Int;
  public pop: Int;
  public a: Node;
  public b: Node;
  public c: Node;
  public d: Node;
  public hash: Int;
  public hash0: Int;
  public succ: ListBuilder<Node>;

  constructor(): Void {
    level = -1;
    hash0 = 0;
  }

  public setSucc(j: Int, n: Node): Void {}
  public draw(config: DrawConfig, bounds: Rectangle): Void {}
}

var fake = new FakeNode();
var off = new RealNode(0, 0, fake, fake, fake, fake, 0);
var on = new RealNode(0, 1, fake, fake, fake, fake, 1);

let join(a: Node, b: Node, c: Node, d: Node): Node {
  var level = a.level + 1;
  var pop = a.pop + b.pop + c.pop + d.pop;
  var hash = (
    72251 * pop
    + 305971 * a.hash0
    + 495071 * b.hash0
    + 801061 * c.hash0
    + 1296137 * d.hash0
  );
  var got = hashtable.getOr(hash, new ListBuilder<Node>());
  for (var i = got.length-1; i >= 0; i--) {
    var exist = got.getOr(i, fake);
    if (
      exist.level == level
      && exist.pop == pop
      && exist.a == a
      && exist.b == b
      && exist.c == c
      && exist.d == d
    ) {
      return exist;
    }
  }
  var node = new RealNode(level, pop, a, b, c, d, hash);
  got.add(node);
  hashtable[hash] = got;
  heat += 1;
  return node;
}

let zero(level: Int): Node {
  if (level == 0) {
    return off;
  } else {
    var val = zero(level-1);
    return join(val, val, val, val);
  }
}

let random(level: Int): Node {
  if (level == 0) {
    if (GetRandomValue(0, 5) == 0) {
      return on
    } else {
      return off;
    }
  } else {
    return join(random(level-1), random(level-1), random(level-1), random(level-1));
  }
}

let lifeRule(a: Node, b: Node, c: Node, d: Node, e: Node, f: Node, g: Node, h: Node, i: Node): Node {
  var outer = a.pop + b.pop + c.pop + d.pop + f.pop + g.pop + h.pop + i.pop;
  if ((outer == 2 && e.pop != 0) || outer == 3) {
    return on;
  } else {
    return off;
  }
}

let subRandom(n: Int, subs: Int): Node {
  if (subs == 0) {
    return random(n);
  } else {
    var v1 = subRandom(n - 1, subs-1);
    var v2 = subRandom(n - 1, subs-1);
    return join(v1, v2, v2, v1);
  }
}

let nodeForBit(n: Boolean): Node {
  if (n) {
    return on;
  } else {
    return off;
  }
}
class Game {
  public grid: Node;
  
  constructor(args: Listed<String>) {
    if ((args[0] == "--random") orelse false) {
      var sizeLog2 = args[1].toInt() orelse 8;
      var size = pow2[sizeLog2];
      grid = random(sizeLog2);
    } else {
      var sizeLog2 = args[0].toInt() orelse 16;
      var size = pow2[sizeLog2];
      grid = zero(sizeLog2);
    }
  }

  public clear(): Void {
    grid = zero(grid.level);
  }

  public addData(size: List<Int>, data: MapBuilder<Int, Boolean>, pos: List<Int>): Void {
    grid = grid.copyWithRangeSet(pos, [pos[0] + size[0], pos[1] + size[1]], data);
  }

  public addBuilder(builder: LifeBuilder, pos: List<Int>): Void {
    addData([builder.width, builder.height], builder.data, pos);
  }

  public draw(bounds: Rectangle): Void {
    var screen = new Rectangle(0.0, 0.0, GetScreenWidth().toFloat64(), GetScreenHeight().toFloat64());
    var config = new DrawConfig(screen);
    DrawRectangleRec(bounds, BLACK);
    grid.draw(config, bounds);
  }

  public advance(n: Int): Void {
    grid = grid.advance(n);
  }
}

class LifeBuilder {
  public width: Int;
  public height: Int;
  // public doFlipX: Boolean;
  // public doFlipY: Boolean;
  
  public data: MapBuilder<Int, Boolean>;
  
  private node: Node;
  private hasNode: Boolean;

  private hasPointList: Boolean;
  private pointListData: List<Int>;

  public constructor(w: Int, h: Int) {
    width = w;
    height = h;
    // doFlipX = false;
    // doFlipY = false;
    data = new MapBuilder<Int, Boolean>();
    clear();
  }

  private clear(): Void {
    hasPointList = false;
    hasNode = false;
  }

  public add(x: Int, y: Int): Void {
    if (y < 0 || y >= height) {
      console.log("y=${y.toString()} not in range 0..${height.toString()}");
      bubble();
    }
    if (x < 0 || x >= width) {
      console.log("x=${x.toString()} not in range 0..${width.toString()}");
      bubble();
    }
    data[x + y * width] = true;
  }

  public buildNode(): Node {
    if (!hasNode) {
      var startTime = GetTime();
      hasNode = true;
      var sizeMax = if (width < height) { height } else { width };
      var empty: Node = off;
      while (pow2[empty.level] < sizeMax) {
        empty = join(empty, empty, empty, empty);
      }
      var start = [
        (width - sizeMax) / 2,
        (height - sizeMax) / 2,
      ];
      var stop = [
        start[0] + width,
        start[1] + height,
      ];
      node = empty.copyWithRangeSet(start, stop, data);
      var endTime = GetTime();
    }
    return node;
  }

  public pointList(): List<Int> {
    if (!hasPointList) {
      hasPointList = true;
      pointListData = data.toList()
        .filter(fn(p: Pair<Int, Boolean>): Boolean { p.value })
        .map(fn(p: Pair<Int, Boolean>): Int { p.key });
    }
    return pointListData;
  }
}

class Pattern {
  private lines: List<String>;
  public name: String;
  public builder: LifeBuilder;
  private isParsed: Boolean;
  private hasTexture: Boolean;
  private texture: RenderTexture;

  public constructor(s: String) {
    lines = s.split("\n");
    name = "???";
    for (var i = 0; i < lines.length; i++) {
      var cur = lines[i].codePoints;
      if (cur.hasAtLeast(1)) {
        if (cur.read() == /* x */ 120) {
          let number(): Int {
            while (!(48 <= cur.read() && cur.read() <= 57)) {
              cur = cur.advance(1);
            }
            var n = 0;
            while (cur.hasAtLeast(1) && 48 <= cur.read() && cur.read() <= 57) {
              n *= 10;
              n += cur.read() - 48;
              cur = cur.advance(1);
            }
            return n;
          }
          builder = new LifeBuilder(number(), number());
          break;
        }
        if (cur.read() == /* # */ 35) {
          var type = cur.advance(1).read();
          if (type == /* N */ 78) {
            var hack = lines[i].split("#N");
            name = hack[hack.length - 1];
          }
        }
      }
    }
    hasTexture = false;
    isParsed = false;
  }

  public drawTool(bounds: Rectangle, selected: Boolean): Boolean {
    if (!isParsed) {
      isParsed = true;
      parseString();
      lines = [];
    }
    if (selected) {
      DrawRectangleRec(bounds, new Color(32, 128, 32, 255));
    } else {
      DrawRectangleRec(bounds, new Color(32, 32, 32, 255));
    }
    var border = 0.1;
    bounds = new Rectangle(
      bounds.x + bounds.width * border,
      bounds.y + bounds.height * border,
      bounds.width * (1.0 - border * 2.0),
      bounds.height * (1.0 - border * 2.0),
    );
    var size = builder.width.toFloat64().max(builder.height.toFloat64());
    var textureBounds = new Rectangle(0.0, 0.0, 100.0, 100.0);
    if (!hasTexture) {
      hasTexture = true;
      texture = LoadRenderTexture(100, 100);
      BeginTextureMode(texture);
      ClearBackground(BLACK);
      var points = builder.pointList();
      var width = builder.width;
      var scale = 100.0 / size;
      var xo = ((size - width.toFloat64()) * 0.5).toInt();
      var yo = ((size - builder.height.toFloat64()) * 0.5).toInt();
      for (var i = 0; i < points.length; i++) {
        var point = points[i];
        var x = (point % width).toFloat64() * scale;
        var y = (point / width).toFloat64() * scale;

        // if (x >= size || y >= size) {
        //   console.log("${x.toString()}x${y.toString()} in ${size.toString()}x${size.toString()}");
        // }

        DrawRectangleRec(new Rectangle(x, y, scale, scale), WHITE);
      }
      EndTextureMode();
    }
    DrawTexturePro(texture.texture, textureBounds, bounds, new Vector2(0.0, 0.0), 1.0, WHITE);
    var mouse = GetMousePosition();
    if (CheckCollisionPointRec(mouse, bounds)) {
      if (IsMouseButtonPressed(0)) {
        return true;
      }
    }
    return false;
  }

  private parseString(): Void {
    var myBuilder = this.builder;
    var funcs = new MapBuilder<String, fn(): Void>();
    var x = 0;
    var y = 0;
    var n = 0;
    for (var i = 0; i < 10; i++) {
      funcs[i.toString()] = fn(num: Int): fn(): Void {
        return fn(): Void {
          n *= 10;
          n += num;
        };
      }(i);
    }
    funcs["b"] = fn(): Void {
      if (n == 0) {
        x += 1;
      } else {
        x += n;
        n = 0;
      }
    }
    funcs["o"] = fn(): Void {
      if (n == 0) {
        myBuilder.add(x++, y);
      } else {
        for (var i = 0; i < n; i++) {
          myBuilder.add(x++, y);
        }
        n = 0;
      }
    }
    funcs["$"] = fn(): Void {
      x = 0;
      if (n == 0) {
        y += 1;
      } else {
        y += n;
        n = 0;
      }
    }
    let nop(): Void {}
    for (var lineNum = 0; lineNum < lines.length; lineNum++) {
      var split: List<String> = lines[lineNum].split("");
      var first = split[0] orelse "#";
      if (first == "#" || first == "x") {
        continue;
      }
      var head = 0;
      var stop = split.length;
      while (head < stop) {
        var todo = funcs[split[head++]] orelse nop;
        todo();
      }
    }
  }
}

class SimpleCamera {
  public target: Vector2;
  public zoom: Float64;
  public cells: Int;
  public screenSize: Vector2;

  constructor(maxLevel: Int) {
    zoom = 1.0;
    target = new Vector2(0.0, 0.0);
    cells = pow2[maxLevel];
  }

  public update(): Void {
    screenSize = new Vector2(GetScreenWidth().toFloat64(), GetScreenHeight().toFloat64());
  }

  public get size(): Float64 {
    return screenSize.x.max(screenSize.y);
  }

  public screenToLife(x: Float64, y: Float64): List<Int> {
    var xProgress = (x / zoom - target.x) / size;
    var yProgress = (y / zoom - target.y) / size;
    return [
      (xProgress * cells.toFloat64()).toInt(),
      (yProgress * cells.toFloat64()).toInt(),
    ];
  }

  public lifeToScreen(life: List<Int>): Vector2 {
    var xProgress = life[0].toFloat64() / cells.toFloat64();
    var yProgress = life[1].toFloat64() / cells.toFloat64();
    return new Vector2(
      xProgress * (size * zoom) - target.x * zoom,
      yProgress * (size * zoom) - target.y * zoom,
    );
  }

  public zoomBy(wheel: Float64, center: Vector2): Void {
    var next = wheel * 0.2;
    target.x = target.x - next * center.x / zoom;
    target.y = target.y - next * center.y / zoom;
    zoom = zoom * (1.0 + next);
  }

  public moveBy(dist: Vector2): Void {
    target.x = target.x + dist.x / zoom;
    target.y = target.y + dist.y / zoom;
  }
}

let loadAllPatterns(): List<Pattern> {
  return LoadFileText("demos/patterns.har").split("\n--- header ---\n").map(fn(s: String): Pattern {
    return new Pattern(s);
  });
}

export class App {
  private allPatterns: List<Pattern>;
  private patternHead: Int;
  private patterns: ListBuilder<Pattern>;
  private selectedEnt: Pattern | Null;
  private game: Game;
  private paused: Boolean;
  private rate: Float64;
  private steps: Float64;
  private camera: SimpleCamera;
  private nextTime: Float64;
  // private realHeat: Int;

  public constructor(args: Listed<String>): Void {
    SetTraceLogLevel(LOG_WARNING);
    allPatterns = loadAllPatterns();
    patternHead = 0;
    patterns = new ListBuilder<Pattern>();
    if (allPatterns.length != 0) {
      for (var i = patternHead; i < patternHead + 10; i++) {
        patterns.add(allPatterns[(i + allPatterns.length) % allPatterns.length]);
      }
    }
    selectedEnt = null;

    var bench = (args[0] == "--bench") orelse false;
    if (bench) {
      SetConfigFlags(FLAG_WINDOW_RESIZABLE);
      args = args.slice(1, args.length);
    } else {
      SetConfigFlags(FLAG_WINDOW_RESIZABLE | FLAG_VSYNC_HINT);
    }

    InitWindow(960, 540, "Conway's Game of LIFE");
    game = new Game(args);

    paused = false;
    rate = 1.0;
    steps = 1.0;

    camera = new SimpleCamera(game.grid.level);

    nextTime = GetTime() + 1.0;

    // realHeat = heat;
    // console.log("Started Hashlife!");
  }

  public loop(): Void {
    camera.update();

    var wheel = GetMouseWheelMove();
    if (wheel != 0.0) {
      camera.zoomBy(wheel, new Vector2(GetMouseX().toFloat64(), GetMouseY().toFloat64()));
    }

    if (IsMouseButtonDown(1) || IsMouseButtonDown(2)) {
      camera.moveBy(GetMouseDelta());
    }
    if (IsKeyPressed(KEY_APOSTROPHE)) {
      steps += 1.0;
      steps /= 0.8;
    }
    if (IsKeyPressed(KEY_SEMICOLON)) {
      steps *= 0.8;
      steps -= 1.0;
      if (steps < 1.0) {
        steps = 1.0;
      }
    }
    if (IsKeyPressed(KEY_PERIOD)) {
      rate *= 2.0;
    }
    if (IsKeyPressed(KEY_COMMA)) {
      rate *= 0.5;
    }
    if (IsKeyPressed(KEY_SPACE)) {
      paused = !paused;
    }
    if (IsKeyPressed(KEY_C)) {
      game.clear();
    }
    if (allPatterns.length != 0) {
      if (IsKeyPressed(KEY_O)) {
        patternHead -= 1;
        patterns = new ListBuilder<Pattern>();
        for (var i = patternHead; i < patternHead + 10; i++) {
          patterns.add(allPatterns[(i + allPatterns.length) % allPatterns.length]);
        }
      }
      if (IsKeyPressed(KEY_P)) {
        patternHead += 1;
        patterns = new ListBuilder<Pattern>();
        for (var i = patternHead; i < patternHead + 10; i++) {
          patterns.add(allPatterns[(i + allPatterns.length) % allPatterns.length]);
        }
      }
    }
    var b0 = IsMouseButtonPressed(0);
    BeginDrawing();
    ClearBackground(new Color(32, 32, 32, 255));
    var gameBounds = new Rectangle(
      camera.target.x * camera.zoom,
      camera.target.y * camera.zoom,
      camera.size * camera.zoom,
      camera.size * camera.zoom,
    );
    var drawStart = GetTime();
    game.draw(gameBounds);
    var drawEnd = GetTime();
    // console.log("${((drawEnd - drawStart) * 1000.0).toString()}ms to draw");
    DrawFPS(20, 20);
    // var n = 1;
    // for (var i = 0; n < realHeat; i += 1) {
      // DrawRectangleRec(new Rectangle(20.0, 50.0 + i.toFloat64() * 30.0, 20.0, 20.0), RED);
      // n *= 2;
    // }
    DrawText("${rate.toString()} hz * ${steps.toInt().toString()} warp", 120, 20, 20, WHITE);
    var entWidth = (GetScreenHeight().toFloat64() * 0.1).min(GetScreenWidth().toFloat64() / patterns.length.toFloat64());
    var mouse = GetMousePosition();
    var drawSelectedEnt = true;
    var clickWasEnts = false;
    var toolText = "";
    for (var i = 0; i < patterns.length; i++) {
      var bounds = new Rectangle(i.toFloat64() * entWidth, GetScreenHeight().toFloat64() - entWidth, entWidth, entWidth);
      if (CheckCollisionPointRec(mouse, bounds)) {
        clickWasEnts = true;
        drawSelectedEnt = false;
        toolText = patterns[i].name;
      }
      if (patterns[i].drawTool(bounds, selectedEnt == patterns[i])) {
        if (selectedEnt == patterns[i]) {
          selectedEnt = null;
        } else {
          selectedEnt = patterns[i];
        }
      }
    }
    if (toolText != "") {
      var width = MeasureText(toolText, 20);
      DrawRectangleRec(new Rectangle(mouse.x + 2.0, mouse.y - 16.0, width.toFloat64() + 4.0, 24.0), new Color(0, 0, 0, 192));
      DrawText(toolText, mouse.x.toInt() + 8, mouse.y.toInt() - 16, 20, WHITE);
    }
    if (drawSelectedEnt && selectedEnt != null && CheckCollisionPointRec(mouse, gameBounds)) {
      var pat = selectedEnt.as<Pattern>();
      DrawText("Selected: ${pat.name}", GetMouseX(), GetMouseY(), 20, GREEN);
    }
    EndDrawing();
    if (paused) {
      nextTime = GetTime() + 1.0 / rate;
    }
    if (!paused) {
      var time = GetTime();
      if (nextTime <= time) {
        game.advance(steps.toInt());
        nextTime = time + 1.0 / rate;
      }
    }
    if (drawSelectedEnt && selectedEnt != null) {
      if (b0) {
        var start = GetTime();
        game.addBuilder(selectedEnt.as<Pattern>().builder, camera.screenToLife(GetMouseX().toFloat64(), GetMouseY().toFloat64()));
        var end = GetTime();
      }
    }

    // if (heat != 0) {
    //   realHeat = heat;
    // }
    // heat = 0;
  }
}

export let main(args: Listed<String>): Void | Bubble {
  var app = new App(args);
  while (!WindowShouldClose()) {
    app.loop();
  }
}
