let {...} = import('../rl/raylib.temper');

let abs(v: Int): Int {
  if (v < 0) {
    return -v;
  } else {
    return v;
  }
}

let absf(v: Float64): Float64 {
  if (v < 0.0) {
    return -v;
  } else {
    return v;
  }
}

export let main(args: Listed<String>): Void | Bubble {
  var borderSize = 12.0;
  var gameSpeed = 1.0;
  var leftStrength = 0.2;
  var rightStrength = 0.2;
  var maxScore = 11;
  var windowScale = 0.75;
  var racketSpeed = 1.0;
  var leftAi = false;
  var rightAi = true;

  for (var i = 0; i < args.length; i++) {
    var argBase = (args[i] orelse "").split("=");
    var nextArg = argBase[1] orelse args[++i] orelse "";
    if (argBase[0] == "--border") {
      borderSize = nextArg.toFloat64();
    }
    if (argBase[0] == "--game-speed") {
      gameSpeed = nextArg.toFloat64();
    }
    if (argBase[0] == "--control") {
      leftStrength = nextArg.toFloat64();
      rightStrength = nextArg.toFloat64();
    }
    if (argBase[0] == "--score") {
      maxScore = nextArg.toInt();
    }
    if (argBase[0] == "--mode") {
      var splitNext = nextArg.split("");
      leftAi = (splitNext[splitNext.length - 2] orelse "h") != "h";
      rightAi = (splitNext[splitNext.length - 1] orelse "h") != "h";
    }
    if (argBase[0] == "--racket-speed") {
      racketSpeed = nextArg.toFloat64();
    }
  }

  if (!leftAi || !rightAi) {
    if (leftAi) {
      leftStrength *= 0.5;
    }
    if (rightAi) {
      rightStrength *= 0.5;
    }
  }

  let UP = -1.0;
  let DOWN = 1.0;

  let SCREEN_TITLE = 0;
  let SCREEN_PLAY = 1;
  let SCREEN_ENDING = 2;

  var rightScore = 0;
  var leftScore = 0;

  SetTraceLogLevel(LOG_WARNING);

  SetConfigFlags(FLAG_WINDOW_RESIZABLE | FLAG_VSYNC_HINT);
  InitWindow(0, 0, "Pong!");

  var screen = new Rectangle(0.0, 0.0, 1920.0, 1080.0);
  var border = new Rectangle(borderSize, borderSize, screen.width - 2.0 * borderSize, screen.height - 2.0 * borderSize);
  var top = new Rectangle(screen.x, screen.y, border.width, border.y);
  var bottom = new Rectangle(screen.x, border.height + borderSize, screen.width, screen.y);

  // SetWindowPosition((screen.width * (1.0 - windowScale)).toInt(), (screen.height * (1.0 - windowScale)).toInt());
  SetWindowSize(screen.width.toInt(), screen.height.toInt());

  var ball = new Rectangle(borderSize * 5.0, border.height, borderSize, borderSize);
  var leftRacket = new Rectangle(border.x + borderSize, border.height / 2.0, borderSize, borderSize * 5.0);
  var rightRacket = new Rectangle(border.width - borderSize, border.height / 2.0, borderSize, borderSize * 5.0);
  var scoreWidth = MeasureText("00", 60);
  var frameTime = 0.0;

  let resizeWindow(): Void {
    console.log("RESIZE");
    var oldScreen = screen;
    screen = new Rectangle(0.0, 0.0, GetScreenWidth().toFloat64(), GetScreenHeight().toFloat64());
    let scaleX(xPos: Float64): Float64 {
      return xPos / oldScreen.width * screen.width;
    }
    let scaleY(yPos: Float64): Float64 {
      return yPos / oldScreen.height * screen.height;
    }
    console.log(scaleX(0.0).toString());
    border = new Rectangle(borderSize, borderSize, screen.width - 2.0 * borderSize, screen.height - 2.0 * borderSize);
    top = new Rectangle(screen.x, screen.y, border.width, border.y);
    bottom = new Rectangle(screen.x, border.height + borderSize, screen.width, screen.y);
    leftRacket = new Rectangle(scaleX(leftRacket.x), scaleY(leftRacket.y), leftRacket.width, leftRacket.height);
    rightRacket = new Rectangle(scaleX(rightRacket.x), scaleY(rightRacket.y), rightRacket.width, rightRacket.height);
    ball = new Rectangle(scaleX(ball.x), scaleY(ball.y), ball.width, ball.height);
  }

  let setBallPos(x: Float64, y: Float64): Void {
    ball = new Rectangle(x, y, borderSize, borderSize);
  }

  var xx = borderSize / 2.0;
  var yy = borderSize / 2.0;
  let moveBall(dir1: Float64, dir2: Float64): Void {
    if (CheckCollisionRecs(ball, leftRacket)) {
      if (xx < 0.0) {
        xx = -xx;
      }
      if (dir1 < 0.0) {
        yy += -borderSize * leftStrength;
      }
      if (dir1 > 0.0) {
        yy += borderSize * leftStrength;
      }
    } else if (CheckCollisionRecs(ball, rightRacket)) {
      if (xx > 0.0) {
        xx = -xx;
      }
      if (dir2 < 0.0) {
        yy += -borderSize * leftStrength;
      }
      if (dir2 > 0.0) {
        yy += borderSize * leftStrength;
      }
    } else if (CheckCollisionRecs(ball, top) || ball.y < 0.0) {
      if (yy < 0.0) {
        yy = -yy
      }
    } else if (CheckCollisionRecs(ball, bottom) || ball.y > screen.height) {
      if (yy > 0.0) {
        yy = -yy;
      }
    } else if (ball.x < screen.x) {
      rightScore = rightScore + 1;
      serveBall();
    } else if (ball.x > screen.width) {
      leftScore = leftScore + 1;
      serveBall();
    }
    setBallPos(ball.x + xx * frameTime, ball.y + yy * frameTime);
  }

  let moveRacket(racket: Rectangle, dir: Float64): Rectangle {
    if ((CheckCollisionRecs(top, racket) && dir < 0.0) || (CheckCollisionRecs(bottom, racket) && dir > 0.0)) {
      return racket;
    } else {
      var step = borderSize * dir * frameTime * racketSpeed;
      return new Rectangle(racket.x, racket.y + step, racket.width, racket.height);
    }
  }

  let serveBall(): Void {
    xx = -xx;
    yy = borderSize / 2.0;
    setBallPos(border.x + border.width / 2.0, GetRandomValue(border.y.toInt() + 10, border.height.toInt()).toFloat64());
  }

  var camera = new Camera2D(
    new Vector2(0.0, 0.0),
    new Vector2(0.0, 0.0),
    0.0,
    1.0,
  );
  var winnerMessage = "";
  var currentScreen = SCREEN_TITLE;
  while (!WindowShouldClose()) {
    resizeWindow();

    frameTime = GetFrameTime() * 60.0 * gameSpeed;

    match (currentScreen) {
      SCREEN_TITLE -> do {
        if (IsKeyPressed(KEY_ENTER)) {
          currentScreen = SCREEN_PLAY;
          ClearBackground(BLACK);
        }
      };
      SCREEN_PLAY -> do {
        var dir1 = 0.0;
        var dir2 = 0.0;

        if (leftAi) {
          var close = 1.0;
          if (ball.y < leftRacket.y + leftRacket.height / 2.0) {
            leftRacket = moveRacket(leftRacket, UP * close);
            dir1 = UP;
          } else {
            leftRacket = moveRacket(leftRacket, DOWN * close);
            dir1 = DOWN;
          }
        } else {
          if (IsKeyDown(KEY_UP)) {
            leftRacket = moveRacket(leftRacket, UP);
            dir1 = UP;
          }
          if (IsKeyDown(KEY_DOWN)) {
            leftRacket = moveRacket(leftRacket, DOWN);
            dir1 = DOWN;
          }
        }

        if (rightAi) {
          var close = 1.0;
          if (close >= 1.0) {
            close = 1.0;
          }
          if (ball.y < rightRacket.y + rightRacket.height / 2.0) {
            rightRacket = moveRacket(rightRacket, UP * close);
            dir2 = UP;
          } else {
            rightRacket = moveRacket(rightRacket, DOWN * close);
            dir2 = DOWN;
          }
        } else {
          if (IsKeyDown(KEY_UP)) {
            rightRacket = moveRacket(rightRacket, UP);
            dir2 = UP;
          }
          if (IsKeyDown(KEY_DOWN)) {
            rightRacket = moveRacket(rightRacket, DOWN);
            dir2 = DOWN;
          }
        }
        moveBall(dir1, dir2);

        if (((leftScore >= maxScore) || (rightScore >= maxScore)) && abs(leftScore - rightScore) > 1) {
          winnerMessage = if (leftScore > rightScore) { "Left" } else { "Right" };
          rightScore = 0;
          leftScore = 0;
          currentScreen = SCREEN_ENDING;
        }
      };
      SCREEN_ENDING -> do {
        if (IsKeyPressed(KEY_ENTER)) {
          currentScreen = SCREEN_TITLE;
        }
      };
    }
    BeginDrawing();
    BeginMode2D(camera);
    match (currentScreen) {
      SCREEN_TITLE -> do {
        ClearBackground(new Color(0, 0, 0, 255));
        DrawText("PONG", 120, 20, 120, GRAY);
        DrawText("Based on Atari PONG", 120, 140, 60, GRAY);
        DrawText("Programmed with Raylib", 120, 220, 20, GRAY);
        DrawText("Player to the Left: W Key, S Key", 120, 390, 20, GRAY);
        DrawText("Player to the Right: Arrow Up, Arrow Down", 120, 420, 20, GRAY);
        DrawText("Press ENTER to PLAY", 120, 450, 20, GRAY);
        DrawText("Press ESCAPE to QUIT", 120, 480, 20, GRAY);
      };
      SCREEN_PLAY -> do {
        ClearBackground(BLACK);
        DrawRectangle(((screen.width/2.0) - 5.0).toInt(), border.y.toInt(), borderSize.toInt(), border.height.toInt(), GRAY);
        DrawText(leftScore.toString(), screen.width.toInt() / 2 - 50 - scoreWidth, 50, 60, GRAY);
        DrawText(rightScore.toString(), screen.width.toInt() / 2 + 50, 50, 60, GRAY);
        DrawRectangleRec(ball, WHITE);
        DrawRectangleRec(leftRacket, WHITE);
        DrawRectangleRec(rightRacket, WHITE);
      };
      SCREEN_ENDING -> do {
        ClearBackground(new Color(0, 0, 0, 255));
        DrawText("Player to the ${winnerMessage} Wins!", 120 , 50, 60, GRAY);
        DrawText("Press ENTER to PLAY AGAIN", 120, 420, 20, GRAY);
        DrawText("Press ESCAPE to QUIT", 120, 450, 20, GRAY);
      };
    }
    EndMode2D();
    EndDrawing();
  }
  CloseWindow();
}

