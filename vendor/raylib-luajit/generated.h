struct GuiStyleProp;
struct GuiTextStyle;
struct Vector2;
struct Vector3;
struct Vector4;
struct Matrix;
struct Color;
struct Rectangle;
struct Image;
struct Texture;
struct RenderTexture;
struct NPatchInfo;
struct GlyphInfo;
struct Font;
struct Camera3D;
struct Camera2D;
struct Mesh;
struct Shader;
struct MaterialMap;
struct Material;
struct Transform;
struct BoneInfo;
struct Model;
struct ModelAnimation;
struct Ray;
struct RayCollision;
struct BoundingBox;
struct Wave;
struct AudioStream;
struct Sound;
struct Music;
struct VrDeviceInfo;
struct VrStereoConfig;
struct FilePathList;
struct AutomationEvent;
struct AutomationEventList;
struct float3;
struct float16;
struct rlVertexBuffer;
struct rlDrawCall;
struct rlRenderBatch;


struct GuiStyleProp {
  unsigned short controlId;
  unsigned short propertyId;
  int propertyValue;
};

struct GuiTextStyle {
  unsigned int size;
  int charSpacing;
  int lineSpacing;
  int alignmentH;
  int alignmentV;
  int padding;
};

struct Vector2 {
  float x;
  float y;
};

struct Vector3 {
  float x;
  float y;
  float z;
};

struct Vector4 {
  float x;
  float y;
  float z;
  float w;
};

struct Matrix {
  float m0;
  float m4;
  float m8;
  float m12;
  float m1;
  float m5;
  float m9;
  float m13;
  float m2;
  float m6;
  float m10;
  float m14;
  float m3;
  float m7;
  float m11;
  float m15;
};

struct Color {
  unsigned char r;
  unsigned char g;
  unsigned char b;
  unsigned char a;
};

struct Rectangle {
  float x;
  float y;
  float width;
  float height;
};

struct Image {
  void * data;
  int width;
  int height;
  int mipmaps;
  int format;
};

struct Texture {
  unsigned int id;
  int width;
  int height;
  int mipmaps;
  int format;
};

struct RenderTexture {
  unsigned int id;
  struct Texture texture;
  struct Texture depth;
};

struct NPatchInfo {
  struct Rectangle source;
  int left;
  int top;
  int right;
  int bottom;
  int layout;
};

struct GlyphInfo {
  int value;
  int offsetX;
  int offsetY;
  int advanceX;
  struct Image image;
};

struct Font {
  int baseSize;
  int glyphCount;
  int glyphPadding;
  struct Texture texture;
  struct Rectangle * recs;
  struct GlyphInfo * glyphs;
};

struct Camera3D {
  struct Vector3 position;
  struct Vector3 target;
  struct Vector3 up;
  float fovy;
  int projection;
};

struct Camera2D {
  struct Vector2 offset;
  struct Vector2 target;
  float rotation;
  float zoom;
};

struct Mesh {
  int vertexCount;
  int triangleCount;
  float * vertices;
  float * texcoords;
  float * texcoords2;
  float * normals;
  float * tangents;
  unsigned char * colors;
  unsigned short * indices;
  float * animVertices;
  float * animNormals;
  unsigned char * boneIds;
  float * boneWeights;
  unsigned int vaoId;
  unsigned int * vboId;
};

struct Shader {
  unsigned int id;
  int * locs;
};

struct MaterialMap {
  struct Texture texture;
  struct Color color;
  float value;
};

struct Material {
  struct Shader shader;
  struct MaterialMap * maps;
  float params[4];
};

struct Transform {
  struct Vector3 translation;
  struct Vector4 rotation;
  struct Vector3 scale;
};

struct BoneInfo {
  char name[32];
  int parent;
};

struct Model {
  struct Matrix transform;
  int meshCount;
  int materialCount;
  struct Mesh * meshes;
  struct Material * materials;
  int * meshMaterial;
  int boneCount;
  struct BoneInfo * bones;
  struct Transform * bindPose;
};

struct ModelAnimation {
  int boneCount;
  int frameCount;
  struct BoneInfo * bones;
  struct Transform * * framePoses;
  char name[32];
};

struct Ray {
  struct Vector3 position;
  struct Vector3 direction;
};

struct RayCollision {
  bool hit;
  float distance;
  struct Vector3 point;
  struct Vector3 normal;
};

struct BoundingBox {
  struct Vector3 min;
  struct Vector3 max;
};

struct Wave {
  unsigned int frameCount;
  unsigned int sampleRate;
  unsigned int sampleSize;
  unsigned int channels;
  void * data;
};

struct AudioStream {
  void * * buffer;
  void * * processor;
  unsigned int sampleRate;
  unsigned int sampleSize;
  unsigned int channels;
};

struct Sound {
  struct AudioStream stream;
  unsigned int frameCount;
};

struct Music {
  struct AudioStream stream;
  unsigned int frameCount;
  bool looping;
  int ctxType;
  void * ctxData;
};

struct VrDeviceInfo {
  int hResolution;
  int vResolution;
  float hScreenSize;
  float vScreenSize;
  float eyeToScreenDistance;
  float lensSeparationDistance;
  float interpupillaryDistance;
  float lensDistortionValues[4];
  float chromaAbCorrection[4];
};

struct VrStereoConfig {
  struct Matrix projection[2];
  struct Matrix viewOffset[2];
  float leftLensCenter[2];
  float rightLensCenter[2];
  float leftScreenCenter[2];
  float rightScreenCenter[2];
  float scale[2];
  float scaleIn[2];
};

struct FilePathList {
  unsigned int capacity;
  unsigned int count;
  const char * * paths;
};

struct AutomationEvent {
  unsigned int frame;
  unsigned int type;
  int params[4];
};

struct AutomationEventList {
  unsigned int capacity;
  unsigned int count;
  struct AutomationEvent * events;
};

struct float3 {
  float v[3];
};

struct float16 {
  float v[16];
};

struct rlVertexBuffer {
  int elementCount;
  float * vertices;
  float * texcoords;
  unsigned char * colors;
  unsigned int vaoId;
  unsigned int vboId[4];
};

struct rlDrawCall {
  int mode;
  int vertexCount;
  int vertexAlignment;
  unsigned int textureId;
};

struct rlRenderBatch {
  int bufferCount;
  int currentBuffer;
  struct rlVertexBuffer * vertexBuffer;
  struct rlDrawCall * draws;
  int drawCounter;
  float currentDepth;
};

void GuiEnable(void);
void GuiDisable(void);
void GuiLock(void);
void GuiUnlock(void);
bool GuiIsLocked(void);
void GuiSetAlpha(float);
void GuiSetState(int);
int GuiGetState(void);
void GuiSetFont(struct Font);
struct Font GuiGetFont(void);
void GuiSetStyle(int, int, int);
int GuiGetStyle(int, int);
void GuiLoadStyle(const char *);
void GuiLoadStyleDefault(void);
void GuiEnableTooltip(void);
void GuiDisableTooltip(void);
void GuiSetTooltip(const char *);
const char * GuiIconText(int, const char *);
int GuiWindowBox(struct Rectangle, const char *);
int GuiGroupBox(struct Rectangle, const char *);
int GuiLine(struct Rectangle, const char *);
int GuiPanel(struct Rectangle, const char *);
int GuiTabBar(struct Rectangle, const char * *, int, int *);
int GuiScrollPanel(struct Rectangle, const char *, struct Rectangle, struct Vector2 *, struct Rectangle *);
int GuiLabel(struct Rectangle, const char *);
int GuiButton(struct Rectangle, const char *);
int GuiLabelButton(struct Rectangle, const char *);
int GuiToggle(struct Rectangle, const char *, bool *);
int GuiToggleGroup(struct Rectangle, const char *, int *);
int GuiToggleSlider(struct Rectangle, const char *, int *);
int GuiCheckBox(struct Rectangle, const char *, bool *);
int GuiComboBox(struct Rectangle, const char *, int *);
int GuiDropdownBox(struct Rectangle, const char *, int *, bool);
int GuiSpinner(struct Rectangle, const char *, int *, int, int, bool);
int GuiValueBox(struct Rectangle, const char *, int *, int, int, bool);
int GuiTextBox(struct Rectangle, const char *, int, bool);
int GuiSlider(struct Rectangle, const char *, const char *, float *, float, float);
int GuiSliderBar(struct Rectangle, const char *, const char *, float *, float, float);
int GuiProgressBar(struct Rectangle, const char *, const char *, float *, float, float);
int GuiStatusBar(struct Rectangle, const char *);
int GuiDummyRec(struct Rectangle, const char *);
int GuiGrid(struct Rectangle, const char *, float, int, struct Vector2 *);
int GuiListView(struct Rectangle, const char *, int *, int *);
int GuiListViewEx(struct Rectangle, const char * *, int, int *, int *, int *);
int GuiMessageBox(struct Rectangle, const char *, const char *, const char *);
int GuiTextInputBox(struct Rectangle, const char *, const char *, const char *, const char *, int, bool *);
int GuiColorPicker(struct Rectangle, const char *, struct Color *);
int GuiColorPanel(struct Rectangle, const char *, struct Color *);
int GuiColorBarAlpha(struct Rectangle, const char *, float *);
int GuiColorBarHue(struct Rectangle, const char *, float *);
int GuiColorPickerHSV(struct Rectangle, const char *, struct Vector3 *);
int GuiColorPanelHSV(struct Rectangle, const char *, struct Vector3 *);
void InitWindow(int, int, const char *);
void CloseWindow(void);
bool WindowShouldClose(void);
bool IsWindowReady(void);
bool IsWindowFullscreen(void);
bool IsWindowHidden(void);
bool IsWindowMinimized(void);
bool IsWindowMaximized(void);
bool IsWindowFocused(void);
bool IsWindowResized(void);
bool IsWindowState(unsigned int);
void SetWindowState(unsigned int);
void ClearWindowState(unsigned int);
void ToggleFullscreen(void);
void ToggleBorderlessWindowed(void);
void MaximizeWindow(void);
void MinimizeWindow(void);
void RestoreWindow(void);
void SetWindowIcon(struct Image);
void SetWindowIcons(struct Image *, int);
void SetWindowTitle(const char *);
void SetWindowPosition(int, int);
void SetWindowMonitor(int);
void SetWindowMinSize(int, int);
void SetWindowMaxSize(int, int);
void SetWindowSize(int, int);
void SetWindowOpacity(float);
void SetWindowFocused(void);
void * GetWindowHandle(void);
int GetScreenWidth(void);
int GetScreenHeight(void);
int GetRenderWidth(void);
int GetRenderHeight(void);
int GetMonitorCount(void);
int GetCurrentMonitor(void);
struct Vector2 GetMonitorPosition(int);
int GetMonitorWidth(int);
int GetMonitorHeight(int);
int GetMonitorPhysicalWidth(int);
int GetMonitorPhysicalHeight(int);
int GetMonitorRefreshRate(int);
struct Vector2 GetWindowPosition(void);
struct Vector2 GetWindowScaleDPI(void);
const char * GetMonitorName(int);
void SetClipboardText(const char *);
const char * GetClipboardText(void);
void EnableEventWaiting(void);
void DisableEventWaiting(void);
void ShowCursor(void);
void HideCursor(void);
bool IsCursorHidden(void);
void EnableCursor(void);
void DisableCursor(void);
bool IsCursorOnScreen(void);
void ClearBackground(struct Color);
void BeginDrawing(void);
void EndDrawing(void);
void BeginMode2D(struct Camera2D);
void EndMode2D(void);
void BeginMode3D(struct Camera3D);
void EndMode3D(void);
void BeginTextureMode(struct RenderTexture);
void EndTextureMode(void);
void BeginShaderMode(struct Shader);
void EndShaderMode(void);
void BeginBlendMode(int);
void EndBlendMode(void);
void BeginScissorMode(int, int, int, int);
void EndScissorMode(void);
void BeginVrStereoMode(struct VrStereoConfig);
void EndVrStereoMode(void);
struct VrStereoConfig LoadVrStereoConfig(struct VrDeviceInfo);
void UnloadVrStereoConfig(struct VrStereoConfig);
struct Shader LoadShader(const char *, const char *);
struct Shader LoadShaderFromMemory(const char *, const char *);
bool IsShaderReady(struct Shader);
int GetShaderLocation(struct Shader, const char *);
int GetShaderLocationAttrib(struct Shader, const char *);
void SetShaderValue(struct Shader, int, const void *, int);
void SetShaderValueV(struct Shader, int, const void *, int, int);
void SetShaderValueMatrix(struct Shader, int, struct Matrix);
void SetShaderValueTexture(struct Shader, int, struct Texture);
void UnloadShader(struct Shader);
struct Ray GetMouseRay(struct Vector2, struct Camera3D);
struct Matrix GetCameraMatrix(struct Camera3D);
struct Matrix GetCameraMatrix2D(struct Camera2D);
struct Vector2 GetWorldToScreen(struct Vector3, struct Camera3D);
struct Vector2 GetScreenToWorld2D(struct Vector2, struct Camera2D);
struct Vector2 GetWorldToScreenEx(struct Vector3, struct Camera3D, int, int);
struct Vector2 GetWorldToScreen2D(struct Vector2, struct Camera2D);
void SetTargetFPS(int);
float GetFrameTime(void);
double GetTime(void);
int GetFPS(void);
void SwapScreenBuffer(void);
void PollInputEvents(void);
void WaitTime(double);
void SetRandomSeed(unsigned int);
int GetRandomValue(int, int);
int * LoadRandomSequence(unsigned int, int, int);
void UnloadRandomSequence(int *);
void TakeScreenshot(const char *);
void SetConfigFlags(unsigned int);
void OpenURL(const char *);
void TraceLog(int, const char *, ...);
void SetTraceLogLevel(int);
void * MemAlloc(unsigned int);
void * MemRealloc(void *, unsigned int);
void MemFree(void *);
unsigned char * LoadFileData(const char *, int *);
void UnloadFileData(unsigned char *);
bool SaveFileData(const char *, void *, int);
bool ExportDataAsCode(const unsigned char *, int, const char *);
const char * LoadFileText(const char *);
void UnloadFileText(const char *);
bool SaveFileText(const char *, const char *);
bool FileExists(const char *);
bool DirectoryExists(const char *);
bool IsFileExtension(const char *, const char *);
int GetFileLength(const char *);
const char * GetFileExtension(const char *);
const char * GetFileName(const char *);
const char * GetFileNameWithoutExt(const char *);
const char * GetDirectoryPath(const char *);
const char * GetPrevDirectoryPath(const char *);
const char * GetWorkingDirectory(void);
const char * GetApplicationDirectory(void);
bool ChangeDirectory(const char *);
bool IsPathFile(const char *);
struct FilePathList LoadDirectoryFiles(const char *);
struct FilePathList LoadDirectoryFilesEx(const char *, const char *, bool);
void UnloadDirectoryFiles(struct FilePathList);
bool IsFileDropped(void);
struct FilePathList LoadDroppedFiles(void);
void UnloadDroppedFiles(struct FilePathList);
long GetFileModTime(const char *);
unsigned char * CompressData(const unsigned char *, int, int *);
unsigned char * DecompressData(const unsigned char *, int, int *);
const char * EncodeDataBase64(const unsigned char *, int, int *);
unsigned char * DecodeDataBase64(const unsigned char *, int *);
struct AutomationEventList LoadAutomationEventList(const char *);
void UnloadAutomationEventList(struct AutomationEventList);
bool ExportAutomationEventList(struct AutomationEventList, const char *);
void SetAutomationEventList(struct AutomationEventList *);
void SetAutomationEventBaseFrame(int);
void StartAutomationEventRecording(void);
void StopAutomationEventRecording(void);
void PlayAutomationEvent(struct AutomationEvent);
bool IsKeyPressed(int);
bool IsKeyPressedRepeat(int);
bool IsKeyDown(int);
bool IsKeyReleased(int);
bool IsKeyUp(int);
int GetKeyPressed(void);
int GetCharPressed(void);
void SetExitKey(int);
bool IsGamepadAvailable(int);
const char * GetGamepadName(int);
bool IsGamepadButtonPressed(int, int);
bool IsGamepadButtonDown(int, int);
bool IsGamepadButtonReleased(int, int);
bool IsGamepadButtonUp(int, int);
int GetGamepadButtonPressed(void);
int GetGamepadAxisCount(int);
float GetGamepadAxisMovement(int, int);
int SetGamepadMappings(const char *);
bool IsMouseButtonPressed(int);
bool IsMouseButtonDown(int);
bool IsMouseButtonReleased(int);
bool IsMouseButtonUp(int);
int GetMouseX(void);
int GetMouseY(void);
struct Vector2 GetMousePosition(void);
struct Vector2 GetMouseDelta(void);
void SetMousePosition(int, int);
void SetMouseOffset(int, int);
void SetMouseScale(float, float);
float GetMouseWheelMove(void);
struct Vector2 GetMouseWheelMoveV(void);
void SetMouseCursor(int);
int GetTouchX(void);
int GetTouchY(void);
struct Vector2 GetTouchPosition(int);
int GetTouchPointId(int);
int GetTouchPointCount(void);
void SetGesturesEnabled(unsigned int);
bool IsGestureDetected(unsigned int);
int GetGestureDetected(void);
float GetGestureHoldDuration(void);
struct Vector2 GetGestureDragVector(void);
float GetGestureDragAngle(void);
struct Vector2 GetGesturePinchVector(void);
float GetGesturePinchAngle(void);
void UpdateCamera(struct Camera3D *, int);
void UpdateCameraPro(struct Camera3D *, struct Vector3, struct Vector3, float);
void SetShapesTexture(struct Texture, struct Rectangle);
struct Texture GetShapesTexture(void);
struct Rectangle GetShapesTextureRectangle(void);
void DrawPixel(int, int, struct Color);
void DrawPixelV(struct Vector2, struct Color);
void DrawLine(int, int, int, int, struct Color);
void DrawLineV(struct Vector2, struct Vector2, struct Color);
void DrawLineEx(struct Vector2, struct Vector2, float, struct Color);
void DrawLineStrip(struct Vector2 *, int, struct Color);
void DrawLineBezier(struct Vector2, struct Vector2, float, struct Color);
void DrawCircle(int, int, float, struct Color);
void DrawCircleSector(struct Vector2, float, float, float, int, struct Color);
void DrawCircleSectorLines(struct Vector2, float, float, float, int, struct Color);
void DrawCircleGradient(int, int, float, struct Color, struct Color);
void DrawCircleV(struct Vector2, float, struct Color);
void DrawCircleLines(int, int, float, struct Color);
void DrawCircleLinesV(struct Vector2, float, struct Color);
void DrawEllipse(int, int, float, float, struct Color);
void DrawEllipseLines(int, int, float, float, struct Color);
void DrawRing(struct Vector2, float, float, float, float, int, struct Color);
void DrawRingLines(struct Vector2, float, float, float, float, int, struct Color);
void DrawRectangle(int, int, int, int, struct Color);
void DrawRectangleV(struct Vector2, struct Vector2, struct Color);
void DrawRectangleRec(struct Rectangle, struct Color);
void DrawRectanglePro(struct Rectangle, struct Vector2, float, struct Color);
void DrawRectangleGradientV(int, int, int, int, struct Color, struct Color);
void DrawRectangleGradientH(int, int, int, int, struct Color, struct Color);
void DrawRectangleGradientEx(struct Rectangle, struct Color, struct Color, struct Color, struct Color);
void DrawRectangleLines(int, int, int, int, struct Color);
void DrawRectangleLinesEx(struct Rectangle, float, struct Color);
void DrawRectangleRounded(struct Rectangle, float, int, struct Color);
void DrawRectangleRoundedLines(struct Rectangle, float, int, float, struct Color);
void DrawTriangle(struct Vector2, struct Vector2, struct Vector2, struct Color);
void DrawTriangleLines(struct Vector2, struct Vector2, struct Vector2, struct Color);
void DrawTriangleFan(struct Vector2 *, int, struct Color);
void DrawTriangleStrip(struct Vector2 *, int, struct Color);
void DrawPoly(struct Vector2, int, float, float, struct Color);
void DrawPolyLines(struct Vector2, int, float, float, struct Color);
void DrawPolyLinesEx(struct Vector2, int, float, float, float, struct Color);
void DrawSplineLinear(struct Vector2 *, int, float, struct Color);
void DrawSplineBasis(struct Vector2 *, int, float, struct Color);
void DrawSplineCatmullRom(struct Vector2 *, int, float, struct Color);
void DrawSplineBezierQuadratic(struct Vector2 *, int, float, struct Color);
void DrawSplineBezierCubic(struct Vector2 *, int, float, struct Color);
void DrawSplineSegmentLinear(struct Vector2, struct Vector2, float, struct Color);
void DrawSplineSegmentBasis(struct Vector2, struct Vector2, struct Vector2, struct Vector2, float, struct Color);
void DrawSplineSegmentCatmullRom(struct Vector2, struct Vector2, struct Vector2, struct Vector2, float, struct Color);
void DrawSplineSegmentBezierQuadratic(struct Vector2, struct Vector2, struct Vector2, float, struct Color);
void DrawSplineSegmentBezierCubic(struct Vector2, struct Vector2, struct Vector2, struct Vector2, float, struct Color);
struct Vector2 GetSplinePointLinear(struct Vector2, struct Vector2, float);
struct Vector2 GetSplinePointBasis(struct Vector2, struct Vector2, struct Vector2, struct Vector2, float);
struct Vector2 GetSplinePointCatmullRom(struct Vector2, struct Vector2, struct Vector2, struct Vector2, float);
struct Vector2 GetSplinePointBezierQuad(struct Vector2, struct Vector2, struct Vector2, float);
struct Vector2 GetSplinePointBezierCubic(struct Vector2, struct Vector2, struct Vector2, struct Vector2, float);
bool CheckCollisionRecs(struct Rectangle, struct Rectangle);
bool CheckCollisionCircles(struct Vector2, float, struct Vector2, float);
bool CheckCollisionCircleRec(struct Vector2, float, struct Rectangle);
bool CheckCollisionPointRec(struct Vector2, struct Rectangle);
bool CheckCollisionPointCircle(struct Vector2, struct Vector2, float);
bool CheckCollisionPointTriangle(struct Vector2, struct Vector2, struct Vector2, struct Vector2);
bool CheckCollisionPointPoly(struct Vector2, struct Vector2 *, int);
bool CheckCollisionLines(struct Vector2, struct Vector2, struct Vector2, struct Vector2, struct Vector2 *);
bool CheckCollisionPointLine(struct Vector2, struct Vector2, struct Vector2, int);
struct Rectangle GetCollisionRec(struct Rectangle, struct Rectangle);
struct Image LoadImage(const char *);
struct Image LoadImageRaw(const char *, int, int, int, int);
struct Image LoadImageSvg(const char *, int, int);
struct Image LoadImageAnim(const char *, int *);
struct Image LoadImageAnimFromMemory(const char *, const unsigned char *, int, int *);
struct Image LoadImageFromMemory(const char *, const unsigned char *, int);
struct Image LoadImageFromTexture(struct Texture);
struct Image LoadImageFromScreen(void);
bool IsImageReady(struct Image);
void UnloadImage(struct Image);
bool ExportImage(struct Image, const char *);
unsigned char * ExportImageToMemory(struct Image, const char *, int *);
bool ExportImageAsCode(struct Image, const char *);
struct Image GenImageColor(int, int, struct Color);
struct Image GenImageGradientLinear(int, int, int, struct Color, struct Color);
struct Image GenImageGradientRadial(int, int, float, struct Color, struct Color);
struct Image GenImageGradientSquare(int, int, float, struct Color, struct Color);
struct Image GenImageChecked(int, int, int, int, struct Color, struct Color);
struct Image GenImageWhiteNoise(int, int, float);
struct Image GenImagePerlinNoise(int, int, int, int, float);
struct Image GenImageCellular(int, int, int);
struct Image GenImageText(int, int, const char *);
struct Image ImageCopy(struct Image);
struct Image ImageFromImage(struct Image, struct Rectangle);
struct Image ImageText(const char *, int, struct Color);
struct Image ImageTextEx(struct Font, const char *, float, float, struct Color);
void ImageFormat(struct Image *, int);
void ImageToPOT(struct Image *, struct Color);
void ImageCrop(struct Image *, struct Rectangle);
void ImageAlphaCrop(struct Image *, float);
void ImageAlphaClear(struct Image *, struct Color, float);
void ImageAlphaMask(struct Image *, struct Image);
void ImageAlphaPremultiply(struct Image *);
void ImageBlurGaussian(struct Image *, int);
void ImageKernelConvolution(struct Image *, float *, int);
void ImageResize(struct Image *, int, int);
void ImageResizeNN(struct Image *, int, int);
void ImageResizeCanvas(struct Image *, int, int, int, int, struct Color);
void ImageMipmaps(struct Image *);
void ImageDither(struct Image *, int, int, int, int);
void ImageFlipVertical(struct Image *);
void ImageFlipHorizontal(struct Image *);
void ImageRotate(struct Image *, int);
void ImageRotateCW(struct Image *);
void ImageRotateCCW(struct Image *);
void ImageColorTint(struct Image *, struct Color);
void ImageColorInvert(struct Image *);
void ImageColorGrayscale(struct Image *);
void ImageColorContrast(struct Image *, float);
void ImageColorBrightness(struct Image *, int);
void ImageColorReplace(struct Image *, struct Color, struct Color);
struct Color * LoadImageColors(struct Image);
struct Color * LoadImagePalette(struct Image, int, int *);
void UnloadImageColors(struct Color *);
void UnloadImagePalette(struct Color *);
struct Rectangle GetImageAlphaBorder(struct Image, float);
struct Color GetImageColor(struct Image, int, int);
void ImageClearBackground(struct Image *, struct Color);
void ImageDrawPixel(struct Image *, int, int, struct Color);
void ImageDrawPixelV(struct Image *, struct Vector2, struct Color);
void ImageDrawLine(struct Image *, int, int, int, int, struct Color);
void ImageDrawLineV(struct Image *, struct Vector2, struct Vector2, struct Color);
void ImageDrawCircle(struct Image *, int, int, int, struct Color);
void ImageDrawCircleV(struct Image *, struct Vector2, int, struct Color);
void ImageDrawCircleLines(struct Image *, int, int, int, struct Color);
void ImageDrawCircleLinesV(struct Image *, struct Vector2, int, struct Color);
void ImageDrawRectangle(struct Image *, int, int, int, int, struct Color);
void ImageDrawRectangleV(struct Image *, struct Vector2, struct Vector2, struct Color);
void ImageDrawRectangleRec(struct Image *, struct Rectangle, struct Color);
void ImageDrawRectangleLines(struct Image *, struct Rectangle, int, struct Color);
void ImageDraw(struct Image *, struct Image, struct Rectangle, struct Rectangle, struct Color);
void ImageDrawText(struct Image *, const char *, int, int, int, struct Color);
void ImageDrawTextEx(struct Image *, struct Font, const char *, struct Vector2, float, float, struct Color);
struct Texture LoadTexture(const char *);
struct Texture LoadTextureFromImage(struct Image);
struct Texture LoadTextureCubemap(struct Image, int);
struct RenderTexture LoadRenderTexture(int, int);
bool IsTextureReady(struct Texture);
void UnloadTexture(struct Texture);
bool IsRenderTextureReady(struct RenderTexture);
void UnloadRenderTexture(struct RenderTexture);
void UpdateTexture(struct Texture, const void *);
void UpdateTextureRec(struct Texture, struct Rectangle, const void *);
void GenTextureMipmaps(struct Texture *);
void SetTextureFilter(struct Texture, int);
void SetTextureWrap(struct Texture, int);
void DrawTexture(struct Texture, int, int, struct Color);
void DrawTextureV(struct Texture, struct Vector2, struct Color);
void DrawTextureEx(struct Texture, struct Vector2, float, float, struct Color);
void DrawTextureRec(struct Texture, struct Rectangle, struct Vector2, struct Color);
void DrawTexturePro(struct Texture, struct Rectangle, struct Rectangle, struct Vector2, float, struct Color);
void DrawTextureNPatch(struct Texture, struct NPatchInfo, struct Rectangle, struct Vector2, float, struct Color);
struct Color Fade(struct Color, float);
int ColorToInt(struct Color);
struct Vector4 ColorNormalize(struct Color);
struct Color ColorFromNormalized(struct Vector4);
struct Vector3 ColorToHSV(struct Color);
struct Color ColorFromHSV(float, float, float);
struct Color ColorTint(struct Color, struct Color);
struct Color ColorBrightness(struct Color, float);
struct Color ColorContrast(struct Color, float);
struct Color ColorAlpha(struct Color, float);
struct Color ColorAlphaBlend(struct Color, struct Color, struct Color);
struct Color GetColor(unsigned int);
struct Color GetPixelColor(void *, int);
void SetPixelColor(void *, struct Color, int);
int GetPixelDataSize(int, int, int);
struct Font GetFontDefault(void);
struct Font LoadFont(const char *);
struct Font LoadFontEx(const char *, int, int *, int);
struct Font LoadFontFromImage(struct Image, struct Color, int);
struct Font LoadFontFromMemory(const char *, const unsigned char *, int, int, int *, int);
bool IsFontReady(struct Font);
struct GlyphInfo * LoadFontData(const unsigned char *, int, int, int *, int, int);
struct Image GenImageFontAtlas(const struct GlyphInfo *, struct Rectangle * *, int, int, int, int);
void UnloadFontData(struct GlyphInfo *, int);
void UnloadFont(struct Font);
bool ExportFontAsCode(struct Font, const char *);
void DrawFPS(int, int);
void DrawText(const char *, int, int, int, struct Color);
void DrawTextEx(struct Font, const char *, struct Vector2, float, float, struct Color);
void DrawTextPro(struct Font, const char *, struct Vector2, struct Vector2, float, float, float, struct Color);
void DrawTextCodepoint(struct Font, int, struct Vector2, float, struct Color);
void DrawTextCodepoints(struct Font, const int *, int, struct Vector2, float, float, struct Color);
void SetTextLineSpacing(int);
int MeasureText(const char *, int);
struct Vector2 MeasureTextEx(struct Font, const char *, float, float);
int GetGlyphIndex(struct Font, int);
struct GlyphInfo GetGlyphInfo(struct Font, int);
struct Rectangle GetGlyphAtlasRec(struct Font, int);
const char * LoadUTF8(const int *, int);
void UnloadUTF8(const char *);
int * LoadCodepoints(const char *, int *);
void UnloadCodepoints(int *);
int GetCodepointCount(const char *);
int GetCodepoint(const char *, int *);
int GetCodepointNext(const char *, int *);
int GetCodepointPrevious(const char *, int *);
const char * CodepointToUTF8(int, int *);
int TextCopy(const char *, const char *);
bool TextIsEqual(const char *, const char *);
unsigned int TextLength(const char *);
const char * TextFormat(const char *, ...);
const char * TextSubtext(const char *, int, int);
const char * TextReplace(const char *, const char *, const char *);
const char * TextInsert(const char *, const char *, int);
const char * TextJoin(const char * *, int, const char *);
const char * * TextSplit(const char *, char, int *);
void TextAppend(const char *, const char *, int *);
int TextFindIndex(const char *, const char *);
const char * TextToUpper(const char *);
const char * TextToLower(const char *);
const char * TextToPascal(const char *);
int TextToInteger(const char *);
float TextToFloat(const char *);
void DrawLine3D(struct Vector3, struct Vector3, struct Color);
void DrawPoint3D(struct Vector3, struct Color);
void DrawCircle3D(struct Vector3, float, struct Vector3, float, struct Color);
void DrawTriangle3D(struct Vector3, struct Vector3, struct Vector3, struct Color);
void DrawTriangleStrip3D(struct Vector3 *, int, struct Color);
void DrawCube(struct Vector3, float, float, float, struct Color);
void DrawCubeV(struct Vector3, struct Vector3, struct Color);
void DrawCubeWires(struct Vector3, float, float, float, struct Color);
void DrawCubeWiresV(struct Vector3, struct Vector3, struct Color);
void DrawSphere(struct Vector3, float, struct Color);
void DrawSphereEx(struct Vector3, float, int, int, struct Color);
void DrawSphereWires(struct Vector3, float, int, int, struct Color);
void DrawCylinder(struct Vector3, float, float, float, int, struct Color);
void DrawCylinderEx(struct Vector3, struct Vector3, float, float, int, struct Color);
void DrawCylinderWires(struct Vector3, float, float, float, int, struct Color);
void DrawCylinderWiresEx(struct Vector3, struct Vector3, float, float, int, struct Color);
void DrawCapsule(struct Vector3, struct Vector3, float, int, int, struct Color);
void DrawCapsuleWires(struct Vector3, struct Vector3, float, int, int, struct Color);
void DrawPlane(struct Vector3, struct Vector2, struct Color);
void DrawRay(struct Ray, struct Color);
void DrawGrid(int, float);
struct Model LoadModel(const char *);
struct Model LoadModelFromMesh(struct Mesh);
bool IsModelReady(struct Model);
void UnloadModel(struct Model);
struct BoundingBox GetModelBoundingBox(struct Model);
void DrawModel(struct Model, struct Vector3, float, struct Color);
void DrawModelEx(struct Model, struct Vector3, struct Vector3, float, struct Vector3, struct Color);
void DrawModelWires(struct Model, struct Vector3, float, struct Color);
void DrawModelWiresEx(struct Model, struct Vector3, struct Vector3, float, struct Vector3, struct Color);
void DrawBoundingBox(struct BoundingBox, struct Color);
void DrawBillboard(struct Camera3D, struct Texture, struct Vector3, float, struct Color);
void DrawBillboardRec(struct Camera3D, struct Texture, struct Rectangle, struct Vector3, struct Vector2, struct Color);
void DrawBillboardPro(struct Camera3D, struct Texture, struct Rectangle, struct Vector3, struct Vector3, struct Vector2, struct Vector2, float, struct Color);
void UploadMesh(struct Mesh *, bool);
void UpdateMeshBuffer(struct Mesh, int, const void *, int, int);
void UnloadMesh(struct Mesh);
void DrawMesh(struct Mesh, struct Material, struct Matrix);
void DrawMeshInstanced(struct Mesh, struct Material, const struct Matrix *, int);
struct BoundingBox GetMeshBoundingBox(struct Mesh);
void GenMeshTangents(struct Mesh *);
bool ExportMesh(struct Mesh, const char *);
bool ExportMeshAsCode(struct Mesh, const char *);
struct Mesh GenMeshPoly(int, float);
struct Mesh GenMeshPlane(float, float, int, int);
struct Mesh GenMeshCube(float, float, float);
struct Mesh GenMeshSphere(float, int, int);
struct Mesh GenMeshHemiSphere(float, int, int);
struct Mesh GenMeshCylinder(float, float, int);
struct Mesh GenMeshCone(float, float, int);
struct Mesh GenMeshTorus(float, float, int, int);
struct Mesh GenMeshKnot(float, float, int, int);
struct Mesh GenMeshHeightmap(struct Image, struct Vector3);
struct Mesh GenMeshCubicmap(struct Image, struct Vector3);
struct Material * LoadMaterials(const char *, int *);
struct Material LoadMaterialDefault(void);
bool IsMaterialReady(struct Material);
void UnloadMaterial(struct Material);
void SetMaterialTexture(struct Material *, int, struct Texture);
void SetModelMeshMaterial(struct Model *, int, int);
struct ModelAnimation * LoadModelAnimations(const char *, int *);
void UpdateModelAnimation(struct Model, struct ModelAnimation, int);
void UnloadModelAnimation(struct ModelAnimation);
void UnloadModelAnimations(struct ModelAnimation *, int);
bool IsModelAnimationValid(struct Model, struct ModelAnimation);
bool CheckCollisionSpheres(struct Vector3, float, struct Vector3, float);
bool CheckCollisionBoxes(struct BoundingBox, struct BoundingBox);
bool CheckCollisionBoxSphere(struct BoundingBox, struct Vector3, float);
struct RayCollision GetRayCollisionSphere(struct Ray, struct Vector3, float);
struct RayCollision GetRayCollisionBox(struct Ray, struct BoundingBox);
struct RayCollision GetRayCollisionMesh(struct Ray, struct Mesh, struct Matrix);
struct RayCollision GetRayCollisionTriangle(struct Ray, struct Vector3, struct Vector3, struct Vector3);
struct RayCollision GetRayCollisionQuad(struct Ray, struct Vector3, struct Vector3, struct Vector3, struct Vector3);
void InitAudioDevice(void);
void CloseAudioDevice(void);
bool IsAudioDeviceReady(void);
void SetMasterVolume(float);
float GetMasterVolume(void);
struct Wave LoadWave(const char *);
struct Wave LoadWaveFromMemory(const char *, const unsigned char *, int);
bool IsWaveReady(struct Wave);
void UnloadWave(struct Wave);
bool ExportWave(struct Wave, const char *);
bool ExportWaveAsCode(struct Wave, const char *);
struct Wave WaveCopy(struct Wave);
void WaveCrop(struct Wave *, int, int);
void WaveFormat(struct Wave *, int, int, int);
float * LoadWaveSamples(struct Wave);
void UnloadWaveSamples(float *);
struct Music LoadMusicStream(const char *);
struct Music LoadMusicStreamFromMemory(const char *, const unsigned char *, int);
bool IsMusicReady(struct Music);
void UnloadMusicStream(struct Music);
void PlayMusicStream(struct Music);
bool IsMusicStreamPlaying(struct Music);
void UpdateMusicStream(struct Music);
void StopMusicStream(struct Music);
void PauseMusicStream(struct Music);
void ResumeMusicStream(struct Music);
void SeekMusicStream(struct Music, float);
void SetMusicVolume(struct Music, float);
void SetMusicPitch(struct Music, float);
void SetMusicPan(struct Music, float);
float GetMusicTimeLength(struct Music);
float GetMusicTimePlayed(struct Music);
struct AudioStream LoadAudioStream(unsigned int, unsigned int, unsigned int);
bool IsAudioStreamReady(struct AudioStream);
void UnloadAudioStream(struct AudioStream);
void UpdateAudioStream(struct AudioStream, const void *, int);
bool IsAudioStreamProcessed(struct AudioStream);
void PlayAudioStream(struct AudioStream);
void PauseAudioStream(struct AudioStream);
void ResumeAudioStream(struct AudioStream);
bool IsAudioStreamPlaying(struct AudioStream);
void StopAudioStream(struct AudioStream);
void SetAudioStreamVolume(struct AudioStream, float);
void SetAudioStreamPitch(struct AudioStream, float);
void SetAudioStreamPan(struct AudioStream, float);
void SetAudioStreamBufferSizeDefault(int);
float Clamp(float, float, float);
float Lerp(float, float, float);
float Normalize(float, float, float);
float Remap(float, float, float, float, float);
float Wrap(float, float, float);
int FloatEquals(float, float);
struct Vector2 Vector2Zero(void);
struct Vector2 Vector2One(void);
struct Vector2 Vector2Add(struct Vector2, struct Vector2);
struct Vector2 Vector2AddValue(struct Vector2, float);
struct Vector2 Vector2Subtract(struct Vector2, struct Vector2);
struct Vector2 Vector2SubtractValue(struct Vector2, float);
float Vector2Length(struct Vector2);
float Vector2LengthSqr(struct Vector2);
float Vector2DotProduct(struct Vector2, struct Vector2);
float Vector2Distance(struct Vector2, struct Vector2);
float Vector2DistanceSqr(struct Vector2, struct Vector2);
float Vector2Angle(struct Vector2, struct Vector2);
float Vector2LineAngle(struct Vector2, struct Vector2);
struct Vector2 Vector2Scale(struct Vector2, float);
struct Vector2 Vector2Multiply(struct Vector2, struct Vector2);
struct Vector2 Vector2Negate(struct Vector2);
struct Vector2 Vector2Divide(struct Vector2, struct Vector2);
struct Vector2 Vector2Normalize(struct Vector2);
struct Vector2 Vector2Transform(struct Vector2, struct Matrix);
struct Vector2 Vector2Lerp(struct Vector2, struct Vector2, float);
struct Vector2 Vector2Reflect(struct Vector2, struct Vector2);
struct Vector2 Vector2Rotate(struct Vector2, float);
struct Vector2 Vector2MoveTowards(struct Vector2, struct Vector2, float);
struct Vector2 Vector2Invert(struct Vector2);
struct Vector2 Vector2Clamp(struct Vector2, struct Vector2, struct Vector2);
struct Vector2 Vector2ClampValue(struct Vector2, float, float);
int Vector2Equals(struct Vector2, struct Vector2);
struct Vector3 Vector3Zero(void);
struct Vector3 Vector3One(void);
struct Vector3 Vector3Add(struct Vector3, struct Vector3);
struct Vector3 Vector3AddValue(struct Vector3, float);
struct Vector3 Vector3Subtract(struct Vector3, struct Vector3);
struct Vector3 Vector3SubtractValue(struct Vector3, float);
struct Vector3 Vector3Scale(struct Vector3, float);
struct Vector3 Vector3Multiply(struct Vector3, struct Vector3);
struct Vector3 Vector3CrossProduct(struct Vector3, struct Vector3);
struct Vector3 Vector3Perpendicular(struct Vector3);
float Vector3Length(const struct Vector3);
float Vector3LengthSqr(const struct Vector3);
float Vector3DotProduct(struct Vector3, struct Vector3);
float Vector3Distance(struct Vector3, struct Vector3);
float Vector3DistanceSqr(struct Vector3, struct Vector3);
float Vector3Angle(struct Vector3, struct Vector3);
struct Vector3 Vector3Negate(struct Vector3);
struct Vector3 Vector3Divide(struct Vector3, struct Vector3);
struct Vector3 Vector3Normalize(struct Vector3);
struct Vector3 Vector3Project(struct Vector3, struct Vector3);
struct Vector3 Vector3Reject(struct Vector3, struct Vector3);
void Vector3OrthoNormalize(struct Vector3 *, struct Vector3 *);
struct Vector3 Vector3Transform(struct Vector3, struct Matrix);
struct Vector3 Vector3RotateByQuaternion(struct Vector3, struct Vector4);
struct Vector3 Vector3RotateByAxisAngle(struct Vector3, struct Vector3, float);
struct Vector3 Vector3Lerp(struct Vector3, struct Vector3, float);
struct Vector3 Vector3Reflect(struct Vector3, struct Vector3);
struct Vector3 Vector3Min(struct Vector3, struct Vector3);
struct Vector3 Vector3Max(struct Vector3, struct Vector3);
struct Vector3 Vector3Barycenter(struct Vector3, struct Vector3, struct Vector3, struct Vector3);
struct Vector3 Vector3Unproject(struct Vector3, struct Matrix, struct Matrix);
struct float3 Vector3ToFloatV(struct Vector3);
struct Vector3 Vector3Invert(struct Vector3);
struct Vector3 Vector3Clamp(struct Vector3, struct Vector3, struct Vector3);
struct Vector3 Vector3ClampValue(struct Vector3, float, float);
int Vector3Equals(struct Vector3, struct Vector3);
struct Vector3 Vector3Refract(struct Vector3, struct Vector3, float);
float MatrixDeterminant(struct Matrix);
float MatrixTrace(struct Matrix);
struct Matrix MatrixTranspose(struct Matrix);
struct Matrix MatrixInvert(struct Matrix);
struct Matrix MatrixIdentity(void);
struct Matrix MatrixAdd(struct Matrix, struct Matrix);
struct Matrix MatrixSubtract(struct Matrix, struct Matrix);
struct Matrix MatrixMultiply(struct Matrix, struct Matrix);
struct Matrix MatrixTranslate(float, float, float);
struct Matrix MatrixRotate(struct Vector3, float);
struct Matrix MatrixRotateX(float);
struct Matrix MatrixRotateY(float);
struct Matrix MatrixRotateZ(float);
struct Matrix MatrixRotateXYZ(struct Vector3);
struct Matrix MatrixRotateZYX(struct Vector3);
struct Matrix MatrixScale(float, float, float);
struct Matrix MatrixFrustum(double, double, double, double, double, double);
struct Matrix MatrixPerspective(double, double, double, double);
struct Matrix MatrixOrtho(double, double, double, double, double, double);
struct Matrix MatrixLookAt(struct Vector3, struct Vector3, struct Vector3);
struct float16 MatrixToFloatV(struct Matrix);
struct Vector4 QuaternionAdd(struct Vector4, struct Vector4);
struct Vector4 QuaternionAddValue(struct Vector4, float);
struct Vector4 QuaternionSubtract(struct Vector4, struct Vector4);
struct Vector4 QuaternionSubtractValue(struct Vector4, float);
struct Vector4 QuaternionIdentity(void);
float QuaternionLength(struct Vector4);
struct Vector4 QuaternionNormalize(struct Vector4);
struct Vector4 QuaternionInvert(struct Vector4);
struct Vector4 QuaternionMultiply(struct Vector4, struct Vector4);
struct Vector4 QuaternionScale(struct Vector4, float);
struct Vector4 QuaternionDivide(struct Vector4, struct Vector4);
struct Vector4 QuaternionLerp(struct Vector4, struct Vector4, float);
struct Vector4 QuaternionNlerp(struct Vector4, struct Vector4, float);
struct Vector4 QuaternionSlerp(struct Vector4, struct Vector4, float);
struct Vector4 QuaternionFromVector3ToVector3(struct Vector3, struct Vector3);
struct Vector4 QuaternionFromMatrix(struct Matrix);
struct Matrix QuaternionToMatrix(struct Vector4);
struct Vector4 QuaternionFromAxisAngle(struct Vector3, float);
void QuaternionToAxisAngle(struct Vector4, struct Vector3 *, float *);
struct Vector4 QuaternionFromEuler(float, float, float);
struct Vector3 QuaternionToEuler(struct Vector4);
struct Vector4 QuaternionTransform(struct Vector4, struct Matrix);
int QuaternionEquals(struct Vector4, struct Vector4);
void rlMatrixMode(int);
void rlPushMatrix(void);
void rlPopMatrix(void);
void rlLoadIdentity(void);
void rlTranslatef(float, float, float);
void rlRotatef(float, float, float, float);
void rlScalef(float, float, float);
void rlMultMatrixf(const float *);
void rlFrustum(double, double, double, double, double, double);
void rlOrtho(double, double, double, double, double, double);
void rlViewport(int, int, int, int);
void rlBegin(int);
void rlEnd(void);
void rlVertex2i(int, int);
void rlVertex2f(float, float);
void rlVertex3f(float, float, float);
void rlTexCoord2f(float, float);
void rlNormal3f(float, float, float);
void rlColor4ub(unsigned char, unsigned char, unsigned char, unsigned char);
void rlColor3f(float, float, float);
void rlColor4f(float, float, float, float);
bool rlEnableVertexArray(unsigned int);
void rlDisableVertexArray(void);
void rlEnableVertexBuffer(unsigned int);
void rlDisableVertexBuffer(void);
void rlEnableVertexBufferElement(unsigned int);
void rlDisableVertexBufferElement(void);
void rlEnableVertexAttribute(unsigned int);
void rlDisableVertexAttribute(unsigned int);
void rlActiveTextureSlot(int);
void rlEnableTexture(unsigned int);
void rlDisableTexture(void);
void rlEnableTextureCubemap(unsigned int);
void rlDisableTextureCubemap(void);
void rlTextureParameters(unsigned int, int, int);
void rlCubemapParameters(unsigned int, int, int);
void rlEnableShader(unsigned int);
void rlDisableShader(void);
void rlEnableFramebuffer(unsigned int);
void rlDisableFramebuffer(void);
void rlActiveDrawBuffers(int);
void rlBlitFramebuffer(int, int, int, int, int, int, int, int, int);
void rlBindFramebuffer(unsigned int, unsigned int);
void rlEnableColorBlend(void);
void rlDisableColorBlend(void);
void rlEnableDepthTest(void);
void rlDisableDepthTest(void);
void rlEnableDepthMask(void);
void rlDisableDepthMask(void);
void rlEnableBackfaceCulling(void);
void rlDisableBackfaceCulling(void);
void rlColorMask(bool, bool, bool, bool);
void rlSetCullFace(int);
void rlEnableScissorTest(void);
void rlDisableScissorTest(void);
void rlScissor(int, int, int, int);
void rlEnableWireMode(void);
void rlEnablePointMode(void);
void rlDisableWireMode(void);
void rlSetLineWidth(float);
float rlGetLineWidth(void);
void rlEnableSmoothLines(void);
void rlDisableSmoothLines(void);
void rlEnableStereoRender(void);
void rlDisableStereoRender(void);
bool rlIsStereoRenderEnabled(void);
void rlClearColor(unsigned char, unsigned char, unsigned char, unsigned char);
void rlClearScreenBuffers(void);
void rlCheckErrors(void);
void rlSetBlendMode(int);
void rlSetBlendFactors(int, int, int);
void rlSetBlendFactorsSeparate(int, int, int, int, int, int);
void rlglInit(int, int);
void rlglClose(void);
void rlLoadExtensions(void *);
int rlGetVersion(void);
void rlSetFramebufferWidth(int);
int rlGetFramebufferWidth(void);
void rlSetFramebufferHeight(int);
int rlGetFramebufferHeight(void);
unsigned int rlGetTextureIdDefault(void);
unsigned int rlGetShaderIdDefault(void);
int * rlGetShaderLocsDefault(void);
struct rlRenderBatch rlLoadRenderBatch(int, int);
void rlUnloadRenderBatch(struct rlRenderBatch);
void rlDrawRenderBatch(struct rlRenderBatch *);
void rlSetRenderBatchActive(struct rlRenderBatch *);
void rlDrawRenderBatchActive(void);
bool rlCheckRenderBatchLimit(int);
void rlSetTexture(unsigned int);
unsigned int rlLoadVertexArray(void);
unsigned int rlLoadVertexBuffer(const void *, int, bool);
unsigned int rlLoadVertexBufferElement(const void *, int, bool);
void rlUpdateVertexBuffer(unsigned int, const void *, int, int);
void rlUpdateVertexBufferElements(unsigned int, const void *, int, int);
void rlUnloadVertexArray(unsigned int);
void rlUnloadVertexBuffer(unsigned int);
void rlSetVertexAttribute(unsigned int, int, int, bool, int, const void *);
void rlSetVertexAttributeDivisor(unsigned int, int);
void rlSetVertexAttributeDefault(int, const void *, int, int);
void rlDrawVertexArray(int, int);
void rlDrawVertexArrayElements(int, int, const void *);
void rlDrawVertexArrayInstanced(int, int, int);
void rlDrawVertexArrayElementsInstanced(int, int, const void *, int);
unsigned int rlLoadTexture(const void *, int, int, int, int);
unsigned int rlLoadTextureDepth(int, int, bool);
unsigned int rlLoadTextureCubemap(const void *, int, int);
void rlUpdateTexture(unsigned int, int, int, int, int, int, const void *);
void rlGetGlTextureFormats(int, unsigned int *, unsigned int *, unsigned int *);
const char * rlGetPixelFormatName(unsigned int);
void rlUnloadTexture(unsigned int);
void rlGenTextureMipmaps(unsigned int, int, int, int, int *);
void * rlReadTexturePixels(unsigned int, int, int, int);
unsigned char * rlReadScreenPixels(int, int);
unsigned int rlLoadFramebuffer(int, int);
void rlFramebufferAttach(unsigned int, unsigned int, int, int, int);
bool rlFramebufferComplete(unsigned int);
void rlUnloadFramebuffer(unsigned int);
unsigned int rlLoadShaderCode(const char *, const char *);
unsigned int rlCompileShader(const char *, int);
unsigned int rlLoadShaderProgram(unsigned int, unsigned int);
void rlUnloadShaderProgram(unsigned int);
int rlGetLocationUniform(unsigned int, const char *);
int rlGetLocationAttrib(unsigned int, const char *);
void rlSetUniform(int, const void *, int, int);
void rlSetUniformMatrix(int, struct Matrix);
void rlSetUniformSampler(int, unsigned int);
void rlSetShader(unsigned int, int *);
unsigned int rlLoadComputeShaderProgram(unsigned int);
void rlComputeShaderDispatch(unsigned int, unsigned int, unsigned int);
unsigned int rlLoadShaderBuffer(unsigned int, const void *, int);
void rlUnloadShaderBuffer(unsigned int);
void rlUpdateShaderBuffer(unsigned int, const void *, unsigned int, unsigned int);
void rlBindShaderBuffer(unsigned int, unsigned int);
void rlReadShaderBuffer(unsigned int, void *, unsigned int, unsigned int);
void rlCopyShaderBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
unsigned int rlGetShaderBufferSize(unsigned int);
void rlBindImageTexture(unsigned int, unsigned int, int, bool);
struct Matrix rlGetMatrixModelview(void);
struct Matrix rlGetMatrixProjection(void);
struct Matrix rlGetMatrixTransform(void);
struct Matrix rlGetMatrixProjectionStereo(int);
struct Matrix rlGetMatrixViewOffsetStereo(int);
void rlSetMatrixProjection(struct Matrix);
void rlSetMatrixModelview(struct Matrix);
void rlSetMatrixProjectionStereo(struct Matrix, struct Matrix);
void rlSetMatrixViewOffsetStereo(struct Matrix, struct Matrix);
void rlLoadDrawCube(void);
void rlLoadDrawQuad(void);
